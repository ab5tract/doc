#!/usr/bin/env perl6

# die with printing a backtrace
my class X::P6doc is Exception {
    has $.message;
    multi method gist(X::P6doc:D:) {
        self.message;
    }
}

constant DEBUG = %*ENV<P6DOC_DEBUG>;

sub findbin() returns Str {
    $*PROGRAM_NAME.subst(rx{<-[/\\]>+$}, '');
}

constant INDEX = findbin() ~ 'index.data';

sub tempfile() {
    my $tempfile = %*ENV<TEMP> // %*ENV<TMP> // '/tmp';
    $tempfile ~= '/';
    $tempfile ~= join '', ('a'..'z', 0..9).roll(5);
    $tempfile ~= '.tmp';
    nextsame if $tempfile.IO.e;
    return $tempfile;
}

sub search-paths() {
    (findbin()  X~ <../doc/perl6/lib/ ../lib/> X~ '',<Type/ Language/ Routine/>),
    @*INC.map({CompUnitRepo.new($_)})».IO».Str.map({ /\/$/ ?? $_ !! $_ ~ '/' });
}

sub module-names(Str $modulename) {
    $modulename.split('::').join('/')
        X~ '.pm', '.pm6', '.pod';
}

sub locate-module(Str $modulename) {
    my $m = (search-paths() X~ module-names($modulename)).first: *.IO.f;
    unless $m.defined {
        my $message = join "\n",
            "Cannot locate $modulename in any of the following paths:",
            search-paths.map({"  $_"});
        X::P6doc.new(:$message).throw;
    }
    return $m;
}

sub show-docs(Str $path, :$section) {
    my $pager = %*ENV<PAGER> // ($*DISTRO.name eq 'mswin32' ?? 'more' !! 'less');
    if not open($path).lines.grep( /^'=' | '#|' | '#='/ )  {
        say "No Pod found in $path";
        return;
    }
    if $section.defined {
        %*ENV<PERL6_POD_HEADING> = $section;
        my $i = findbin() ~ '../lib';
        say "launching '$*EXECUTABLE_NAME -I$i --doc=SectionFilter $path | $pager'" if DEBUG;
        shell "$*EXECUTABLE_NAME -I$i --doc=SectionFilter $path | $pager";
    }
    else {
        shell "$*EXECUTABLE_NAME --doc $path | $pager";
    }

}

multi sub MAIN() {
    my $me = $*PROGRAM_NAME.IO.basename;

    say 'What documentation do you want to read?';
    say "Examples: $me Type::Str";
    say "          $me Type::Str.split";

    say "\nYou can also look up specific method/routine defintions:";
    say "          $me -f push";
}

multi sub MAIN($docee) {
    return MAIN($docee, :f) if defined $docee.index('.') ;
    if INDEX.IO ~~ :e {
        my %data = EVAL slurp INDEX;
        if %data{$docee} {
            my $newdoc = %data{$docee}[0][0];
            return MAIN($newdoc);
        }
    }
    show-docs(locate-module($docee));
}

multi sub MAIN($docee, Bool :$f!) {
    my ($package, $method) = $docee.split('.');
    if ! $method {
        my %hits;
        $method = $package;
        if INDEX.IO ~~ :e {
            my %data = EVAL slurp INDEX;
            for <routine method> -> $pref {
                my $ndocee = $pref ~ " " ~ $docee;

                if %data{$ndocee} {
                    %hits{$ndocee}.push: %data{$ndocee}.values>>.grep(/^Type/) X~ "." ~ $method;
                }
            }

            say "\nWe have multiple matches for '$method'\n";
            my %options;
            for %hits.keys -> $key {
                my $pref = $key.split(' ')[0];
                say "\t'$method' {$pref}s";

                %options{$key}.push: %hits{$key}>>.subst(/^'Type::'/, '');
                say "\t\t" ~ %options{$key}.join("\n\t\t") ~ "\n";
            }

            my %prefixes = do for %options.values -> @o { @o.map( *.comb[0].lc ) X=> @o };

            my $final-docee;
            while prompt("Narrow your choice ({ %prefixes.keys.join(', ') }, or ! to quit): ").words -> $word {
                if $word  ~~ '!' {
                    exit 1;
                } elsif my $choice = $word ~~ rx:i/ @(%prefixes.keys) / {
                    $final-docee = %prefixes{ $choice.lc };
                    say "Loading $final-docee...";
                    last;
                } else {
                    say "$word is not a valid choice.\n";
                    next;
                }
            }

            ($package, $method) = $final-docee.split('.');
            my $m = locate-module($package);
            show-docs($m, :section($method));
        } else {
            say 'In order to use unqualified sub and method names like "p6doc -f say"';
            say 'you will need to run "p6doc-index build" to build index.data.';
            say 'Otherwise use "p6doc -f Str.split" instead of "p6doc -f split" for now.';
            exit 2;
        }
    } else {
        my $m = locate-module($package);
        show-docs($m, :section($method));
    }
}

# vim: expandtab shiftwidth=4 ft=perl6
